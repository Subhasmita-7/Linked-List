/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head.next == null || head==null){
            return true;
        }

        ListNode slow = head;
        ListNode fast = head;

        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }

        ListNode sechalf = reverse(slow);
        ListNode firsthalf = head;

        while(sechalf != null){
            if(firsthalf.val != sechalf.val){
                return false;
            }

            firsthalf = firsthalf.next;
            sechalf = sechalf.next;
        }
        return true;
    }
    private ListNode reverse(ListNode head){
        ListNode temp = null;
        ListNode current = head;
        while(current != null){
            ListNode front = current.next;
            current.next = temp;
            temp = current;
            current = front;
        }
        return temp;
    }
}
